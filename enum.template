package example;

import javax.annotation.processing.Generated;
import java.util.Arrays;

// ${description}
@Generated(comments="Generated by Gradle task generateEnums", value={})
public enum ${name} {
<% values.eachWithIndex { value, index -> %>
    // <%= value.description %>
    <%= value.string.toUpperCase() %>\
("<%= value.string %>", <%= value.int %>)<%= index == values.size - 1 ? ";" : "," %>
<% } %>
    private String stringValue;
    private int intValue;

    private ${name}(String stringValue, int intValue) {
        this.stringValue = stringValue;
        this.intValue = intValue;
    }

    public static ${name} fromString(String stringValue) {
        return Arrays.stream(${name}.values())
                .filter(v -> v.stringValue == stringValue)
                .findFirst()
                .orElseThrow(() -> new EnumConstantNotPresentException(
                        ${name}.class, stringValue));
    }

    public static ${name} fromInt(int intValue) {
        return Arrays.stream(${name}.values())
                .filter(v -> v.intValue == intValue)
                .findFirst()
                .orElseThrow(() -> new EnumConstantNotPresentException(
                        ${name}.class, String.valueOf(intValue)));
    }

    public String getStringValue() {
        return this.stringValue;
    }

    public int getIntValue() {
        return this.intValue;
    }
}
